#! /bin/zsh

alias gs="git number" # git status
alias ga="git number add"
alias gaa="git add --all"
alias gco="git number checkout"
alias gb="git branch"

alias gd="git number diff"
alias gds="git number diff --staged"
alias giti="v .gitignore"
alias gr="git number reset"
alias gitm="v .gitmodules"
# alias gp="git number -c $VIM" # git preview
alias gp="git push"
alias gcan="git commit --amend --no-edit"

alias gap="git number add -p"
alias gms="git merge --squash" # squash diff into one commit

alias gu="git fetch && git number status" # git update
alias gc="git commit"
alias gau="git add -u"
alias ga.="git add ."

# git log
function gl() {
  [ "$1" ] && len=$1 || len=20
  git log --oneline --graph -n $len
}

# git commit
function gcm() {
  if [ "$1" ]; then
    git commit -m $1
  else
    git commit
  fi
}

# git commit --amend
function gca() {
  if [ "$1" ]; then
    git commit --amend -m $1
  else
    git commit --amend
  fi
}

# the laziest git function ever
function gq() {
  git add .
  git commit -m 'up'
  git push
}

# delete branch
# git branch -d <branch_name>

# delete remote branch
# git push origin -d <branch_name>

# to remove a submodule completely:
# 0. mv a/submodule a/submodule_tmp
# 1. git submodule deinit -f -- a/submodule    
# 2. rm -rf .git/modules/a/submodule
# 3. git rm -f a/submodule
# Note: a/submodule (no trailing slash)
 
# or, if you want to leave it in your working tree and have done step 0
# 3.   git rm --cached a/submodule
# 3b.  mv a/submodule_tmp a/submodule
# remove a file with sensitive data from history
# git filter-repo --invert-paths --path secrets.json
